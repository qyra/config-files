{
	// Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Test if variable is unset": {
		"prefix": "kjunset",
		"body": [
			" -z ${$1+x} ",
		],
		"description": "Test if variable is unset"
	},
	"Get variable or default": {
		"prefix": "kjdefault",
		"body": [
			"\"${$1:-$2}\"",
		]
	},
	"Get path to the current script": {
		"prefix": "kjscriptpath",
		"body": [
			"SCRIPT_PATH=\"${BASH_SOURCE[0]:-${(%):-%N}}\"",
		],
		"description": "Get path to the current script"
	},
	"Get directory of the current script": {
		"prefix": "kjscriptdir",
		"body": [
			"SCRIPT_DIR=\"$(cd $(dirname ${BASH_SOURCE[0]:-${(%):-%N}}) >/dev/null && pwd)\"",
		],
		"description": "Get directory of the current script"
	},
	"Bash Header": {
		"prefix": "kjheader",
		"body": [
			"#!/bin/bash",
			"set -euo pipefail",
			"",
		],
		"description": "Bash Header"
	},
	"Interpolated String": {
		"prefix": "kjstring",
		"body": [
			"$1=$(cat <<LIMIT_STRING",
			"$2",
			"LIMIT_STRING",
			")",
		],
		"description": "Bash Header"
	}
	// "If statement": {
	// 	"prefix": "kjif",
	// 	"body": [
	// 		"if [[ $1 ]]; then",
	// 		"    $2",
	// 		"else",
	// 		"    $3",
	// 		"fi"
	// 	],
	// 	"description": "Log output to console"
	// }
}
